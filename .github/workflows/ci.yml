# .github/workflows/vercel-preview.yml
name: Vercel Preview Deployment (with debug)

on:
  push:            # every branch
    branches: ["**"]
  workflow_dispatch:

env:
  SECRETS_BLOB: ${{ secrets.SECRETS_BLOB }}

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ─── 0. RAW BLOB sanity-check ──────────────────────────────────────────
      - name: DEBUG – inspect raw SECRETS_BLOB
        if: always()
        shell: bash
        run: |
          echo "Blob length (bytes in env var): ${#SECRETS_BLOB}"
          if printf '%s' "$SECRETS_BLOB" | base64 --decode > /tmp/decoded 2>/tmp/err; then
            echo "--- first 200 decoded bytes ---"
            head -c 200 /tmp/decoded | od -An -t c
            echo
            echo "--- full decoded text ---"
            cat /tmp/decoded
          else
            echo "Base64 decode failed ↓"; cat /tmp/err
          fi

      # ─── 1. Decode SECRETS_BLOB into $GITHUB_ENV ───────────────────────────
      - name: Load secrets from SECRETS_BLOB
        shell: bash
        run: |
          set -euo pipefail
          declare -A kv
          printf '%s' "$SECRETS_BLOB" | base64 --decode | sed $'s/\r//g' |
          grep -Ev '^\s*$|^\s*#' | while IFS= read -r line; do
            [[ "$line" =~ ^([^:=]+)[=:][[:space:]]*(.*)$ ]] || continue
            key="${BASH_REMATCH[1]//[[:space:]]/}"
            val="${BASH_REMATCH[2]}"
            val="$(printf '%b' "$val")"
            [[ "$val" == \"*\" && "$val" == *\" ]] && val="${val:1:-1}"
            kv["$key"]="$val"          # last duplicate wins
          done
          for key in "${!kv[@]}"; do
            val="${kv[$key]}"
            if [[ "$val" == *$'\n'* ]]; then
              printf '%s<<EOF\n%s\nEOF\n' "$key" "$val" >> "$GITHUB_ENV"
            else
              printf '%s=%s\n' "$key" "$val" >> "$GITHUB_ENV"
            fi
          done

      # ─── 2. DEBUG – show what got exported ─────────────────────────────────
      - name: DEBUG – list decoded secrets
        if: always()
        run: |
          echo "Contents of $GITHUB_ENV ↓"; cat "$GITHUB_ENV"

      # ─── 3. Install Bun (needed for vercel build) ──────────────────────────
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.16          # or omit for latest

      # ─── 4. Install Vercel CLI & deploy preview ────────────────────────────
      - name: Install Vercel CLI
        run: npm install --global vercel

      - name: Pull Vercel environment (preview)
        run: vercel pull --yes --environment=preview --token="$VERCEL_TOKEN"

      - name: Build project
        run: vercel build --token="$VERCEL_TOKEN"

      - name: Deploy (preview)
        run: vercel deploy --prebuilt --token="$VERCEL_TOKEN"
