# .github/workflows/vercel-preview.yml
name: Vercel Preview Deployment

on:
  push:
    branches: ["**"]          # run on every branch
  workflow_dispatch:          # manual trigger

# Only the blob is referenced directly; everything else comes from it.
env:
  SECRETS_BLOB: ${{ secrets.SECRETS_BLOB }}

jobs:
  deploy-preview:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ─── Decode SECRETS_BLOB → export KEY=VALUE pairs ──────────────────────
      - name: Load secrets from SECRETS_BLOB
        shell: bash
        run: |
          set -euo pipefail
          declare -A kv

          # 1) decode, strip CRs, skip blanks/comments
          printf '%s' "$SECRETS_BLOB" | base64 --decode | sed $'s/\r//g' |
          grep -Ev '^\s*$|^\s*#' | while IFS= read -r line; do
            # split on first '=' or ':'
            [[ "$line" =~ ^([^:=]+)[=:][[:space:]]*(.*)$ ]] || continue
            key="${BASH_REMATCH[1]//[[:space:]]/}"
            val="${BASH_REMATCH[2]}"
            val="$(printf '%b' "$val")"              # unescape \n, \t, etc.
            [[ "$val" == \"*\" && "$val" == *\" ]] && val="${val:1:-1}"  # trim quotes
            kv["$key"]="$val"                       # last duplicate wins
          done

          # write each var to $GITHUB_ENV
          for key in "${!kv[@]}"; do
            val="${kv[$key]}"
            if [[ "$val" == *$'\n'* ]]; then
              printf '%s<<EOF\n%s\nEOF\n' "$key" "$val" >> "$GITHUB_ENV"
            else
              printf '%s=%s\n' "$key" "$val" >> "$GITHUB_ENV"
            fi
          done

      # ─── Install Bun (needed because Vercel sees bun.lockb) ────────────────
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.16         # pin or omit for latest

      # ─── Install Vercel CLI ────────────────────────────────────────────────
      - name: Install Vercel CLI
        run: npm install --global vercel

      # ─── Pull env, build, and deploy (preview) ─────────────────────────────
      - name: Pull Vercel environment (preview)
        run: vercel pull --yes --environment=preview --token="$VERCEL_TOKEN"

      - name: Build project
        run: vercel build --token="$VERCEL_TOKEN"

      - name: Deploy (preview)
        run: vercel deploy --prebuilt --token="$VERCEL_TOKEN"
