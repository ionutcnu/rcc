name: CI
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SECRETS_BLOB: ${{ secrets.SECRETS_BLOB }}

    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with: { bun-version: "1.2.16" }
      - uses: actions/setup-node@v4
        with: { node-version: 18 }

      - name: Install deps (retry, low concurrency)
        run: |
          for try in 1 2 3; do
            bun install --network-concurrency=12 --no-progress && break
            [ "$try" -lt 3 ] && { echo "⚠️ retrying in 15 s…"; sleep 15; }
          done

      # ─────────────  SECRET LOADER  ─────────────
      - name: Load secrets into runner-wide env
        shell: bash
        run: |
          echo "$SECRETS_BLOB" | base64 --decode |
          while IFS= read -r line; do
            var="${line%%=*}"
            val="${line#*=}"

            # 1) Expand back-slash escapes (\n, \t…)
            expanded=$(printf '%b' "$val")

            # 2) Strip ONE pair of wrapping double-quotes, if present
            if [[ "$expanded" == \"*\" && "$expanded" == *\" ]]; then
              expanded="${expanded:1:-1}"
            fi

            # 3) Remove trailing CR / LF so single-line values stay single-line
            expanded="${expanded//$'\r'/}"
            while [[ "$expanded" == *$'\n' ]]; do
              expanded=${expanded%$'\n'}
            done

            # 4) Decide single- vs multiline
            if [[ "$expanded" == *$'\n'* ]]; then
              printf '%s<<EOF\n%s\nEOF\n' "$var" "$expanded" >> "$GITHUB_ENV"
            else
              printf '%s=%s\n' "$var" "$expanded" >> "$GITHUB_ENV"
            fi
          done
      # ───────────────────────────────────────────

      - name: Dump env keys (masked values)
        run: node -e 'for (const [k,v] of Object.entries(process.env).sort()) console.log(`${k}=${v}`)'

      - uses: cypress-io/github-action@v6
        id: cypress
        with:
          build: bun run build:no-tests
          start: bun run start
          wait-on: http://localhost:3000
          wait-on-timeout: 60
          headed: true
          browser: chrome
          record: false
          config: |
            video=true
            screenshotOnRunFailure=true
            retries=1

      - name: Upload Cypress videos & screenshots
        if: failure() || steps.cypress.outcome != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: cypress-debug
          path: |
            cypress/videos
            cypress/screenshots

  deploy:
    needs: test
    if: needs.test.result == 'success'
    runs-on: ubuntu-latest
    env:
      SECRETS_BLOB: ${{ secrets.SECRETS_BLOB }}

    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with: { bun-version: "1.2.16" }
      - uses: actions/setup-node@v4
        with: { node-version: 18 }

      - name: Install deps (retry, low concurrency)
        run: |
          for try in 1 2 3; do
            bun install --network-concurrency=12 --no-progress && break
            [ "$try" -lt 3 ] && { echo "⚠️ retrying in 15 s…"; sleep 15; }
          done

      # same loader in deploy job
      - name: Load secrets into runner-wide env
        shell: bash
        run: |
          echo "$SECRETS_BLOB" | base64 --decode |
          while IFS= read -r line; do
            var="${line%%=*}"
            val="${line#*=}"
            expanded=$(printf '%b' "$val")
            if [[ "$expanded" == \"*\" && "$expanded" == *\" ]]; then
              expanded="${expanded:1:-1}"
            fi
            expanded="${expanded//$'\r'/}"
            while [[ "$expanded" == *$'\n' ]]; do expanded=${expanded%$'\n'}; done
            if [[ "$expanded" == *$'\n'* ]]; then
              printf '%s<<EOF\n%s\nEOF\n' "$var" "$expanded" >> "$GITHUB_ENV"
            else
              printf '%s=%s\n' "$var" "$expanded" >> "$GITHUB_ENV"
            fi
          done

      - name: Dump env keys (deploy job)
        run: node -e 'for (const [k,v] of Object.entries(process.env).sort()) console.log(`${k}=${v}`)'

      # ───── Vercel recommended flow ─────
      - name: Deploy with Vercel
        run: |
          npm i -g vercel
          vercel pull --yes --environment=production --token="$VERCEL_TOKEN"
          vercel build --prod --token="$VERCEL_TOKEN"
          vercel deploy --prebuilt --prod --token="$VERCEL_TOKEN"
