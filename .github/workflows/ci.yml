name: Vercel Preview Deployment

# ───── Triggers ────────────────────────────────────────────────────────────────
# Runs on every push to any branch + manual trigger
on:
  push:
    branches: ["**"]        # all branches
  workflow_dispatch:

# ───── The only “plain” secret we reference up-front ───────────────────────────
# Everything else (VERCEL_TOKEN, VERCEL_ORG_ID, …) lives inside SECRETS_BLOB.
env:
  SECRETS_BLOB: ${{ secrets.SECRETS_BLOB }}

jobs:
  deploy-preview:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ─── Decode + export all secrets from SECRETS_BLOB ───────────────────────
      - name: Load secrets from SECRETS_BLOB
        shell: bash
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          declare -A kv   # store last value per key

          # 1) decode blob → strip CRs → skip blanks / comments
          printf '%s' "$SECRETS_BLOB" | base64 --decode |
          sed $'s/\r//g' | grep -Ev '^\s*$|^\s*#' |
          while IFS= read -r line; do
            # 2) split on first '=' or ':'  → key / value
            if [[ "$line" =~ ^([^:=]+)[=:][[:space:]]*(.*)$ ]]; then
              key="${BASH_REMATCH[1]//[[:space:]]/}"
              val="${BASH_REMATCH[2]}"
            else
              echo "WARN: skipping unparsable line → $line" >&2
              continue
            fi

            # 3) unescape backslash-escapes ( \n, \t , \" …)
            val=$(printf '%b' "$val")

            # 4) trim one pair of wrapping quotes, if any
            [[ "$val" == \"*\" && "$val" == *\" ]] && val="${val:1:-1}"

            kv["$key"]="$val"      # keep only last occurrence
          done

          # 5) write each var exactly once into $GITHUB_ENV
          for key in "${!kv[@]}"; do
            val="${kv[$key]}"
            if [[ "$val" == *$'\n'* ]]; then
              printf '%s<<EOF\n%s\nEOF\n' "$key" "$val" >> "$GITHUB_ENV"
            else
              printf '%s=%s\n' "$key" "$val" >> "$GITHUB_ENV"
            fi
          done

      # ─── OPTIONAL: inspect what was decoded (delete when satisfied) ───────────
      - name: DEBUG – list decoded secrets
        if: always()
        run: cat "$GITHUB_ENV"

      # ─── Vercel CLI deploy flow ───────────────────────────────────────────────
      - name: Install Vercel CLI
        run: npm install --global vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token="$VERCEL_TOKEN"

      - name: Build Project Artifacts
        run: vercel build --token="$VERCEL_TOKEN"

      - name: Deploy Project Artifacts
        run: vercel deploy --prebuilt --token="$VERCEL_TOKEN"
