name: Vercel Preview Deployment

# Trigger on every push to any branch and manual dispatch
on:
  push:
  workflow_dispatch:

# Only the blob itself is stored as a classic GitHub Secret
env:
  SECRETS_BLOB: ${{ secrets.SECRETS_BLOB }}

jobs:
  # ------------------------------------------------------------------
  # DEPLOY – build & push a Vercel preview for every branch
  # ------------------------------------------------------------------
  deploy-preview:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20  # Align with latest LTS

      # ─── SECRET LOADER ────────────────────────────────────────────
      - name: Load secrets from SECRETS_BLOB
        shell: bash
        run: |
          # Decode the blob and iterate line‑by‑line. We normalise CR/LF **before**
          # splitting the KEY=VALUE pair so the key never contains stray \r chars
          echo "$SECRETS_BLOB" | base64 --decode | while IFS= read -r raw; do
            # Remove any carriage‑returns left over from Windows newlines
            line="${raw//$'\r'/}"

            # Skip empty lines
            [[ -z "$line" ]] && continue

            var="${line%%=*}"
            val="${line#*=}"

            # 1) expand escaped sequences in the *value* only (\n, \t, etc.)
            expanded=$(printf '%b' "$val")

            # 2) trim trailing newlines from the expanded value
            while [[ "$expanded" == *$'\n' ]]; do
              expanded=${expanded%$'\n'}
            done

            # 3) strip ONE wrapping pair of quotes if still present (value side)
            if [[ "$expanded" == \"*\" && "$expanded" == *\" ]]; then
              expanded="${expanded:1:-1}"
            fi

            # 4) write to $GITHUB_ENV (heredoc for multiline values)
            if [[ "$expanded" == *$'\n'* ]]; then
              printf '%s<<EOF\n%s\nEOF\n' "$var" "$expanded" >> "$GITHUB_ENV"
            else
              printf '%s=%s\n' "$var" "$expanded" >> "$GITHUB_ENV"
            fi
          done
      # ──────────────────────────────────────────────────────────────

      # ─── DEBUG STEP – remove after troubleshooting ───────────────
      - name: DEBUG – list decoded secrets
        run: |
          echo "===== BEGIN DECODED SECRETS ====="
          cat "$GITHUB_ENV"
          echo "=====  END DECODED SECRETS  ====="
      # ──────────────────────────────────────────────────────────────

      - name: Install Vercel CLI
        run: npm install --global vercel

      - name: Pull Vercel environment (preview)
        run: vercel pull --yes --environment=preview --token=${{ env.VERCEL_TOKEN }}

      - name: Build project
        run: vercel build --token=${{ env.VERCEL_TOKEN }}

      - name: Deploy preview
        run: vercel deploy --prebuilt --token=${{ env.VERCEL_TOKEN }}
