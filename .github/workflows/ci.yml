name: Vercel Preview Deployment

# Trigger on every push to any branch, plus manual dispatch
on:
  push:
  workflow_dispatch:

# Environment variables shared by all jobs
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  SECRETS_BLOB: ${{ secrets.SECRETS_BLOB }}

jobs:
  # ------------------------------------------------------------------
  # 1. TEST â€“ temporarily disabled while we focus on deploy
  # ------------------------------------------------------------------
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Tests currently disabled
  #       run: echo "ðŸ›‘ Skipping tests for now"

  # ------------------------------------------------------------------
  # 2. DEPLOY â€“ build & push a Vercel preview for every branch
  # ------------------------------------------------------------------
  deploy-preview:
    # When you re-enable the Test job, restore the next line
    # needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20  # Align with latest LTS

      # â”€â”€â”€ SECRET LOADER â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Load secrets from SECRETS_BLOB
        shell: bash
        run: |
          echo "$SECRETS_BLOB" | base64 --decode |
          while IFS= read -r line; do
            var="${line%%=*}"
            val="${line#*=}"

            # 1) expand \n, \t, etc.
            expanded=$(printf '%b' "$val")

            # 2) trim CR/LF
            expanded="${expanded//$'\r'/}"
            while [[ "$expanded" == *$'\n' ]]; do
              expanded=${expanded%$'\n'}
            done

            # 3) strip ONE wrapping pair of quotes if still present
            if [[ "$expanded" == \"*\" && "$expanded" == *\" ]]; then
              expanded="${expanded:1:-1}"
            fi

            # 4) write to $GITHUB_ENV (heredoc for multiline)
            if [[ "$expanded" == *$'\n'* ]]; then
              printf '%s<<EOF\n%s\nEOF\n' "$var" "$expanded" >> "$GITHUB_ENV"
            else
              printf '%s=%s\n' "$var" "$expanded" >> "$GITHUB_ENV"
            fi
          done
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

      - name: Install Vercel CLI
        run: npm install --global vercel

      - name: Pull Vercel environment (preview)
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy preview
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
