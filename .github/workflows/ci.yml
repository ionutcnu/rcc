name: CI
on:
  push:                # run on every branch push
  pull_request:        # PR checks
  workflow_dispatch:   # manual trigger

jobs:
  # ──────────────────────────────────────────────────────────
  # 1  TEST – build the app & run Cypress
  # ──────────────────────────────────────────────────────────
  test:
    runs-on: ubuntu-latest
    env:
      SECRETS_BLOB: ${{ secrets.SECRETS_BLOB }}

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: "1.2.16"

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      # install with retry + lower network fan-out
      - name: Install deps (retry, low concurrency)
        run: |
          for try in 1 2 3; do
            echo "🔄 bun install (try $try)…"
            bun install --network-concurrency=12 --no-progress && break
            [ "$try" -lt 3 ] && { echo "⚠️  retrying in 15 s…"; sleep 15; }
          done

      # 🔑 decode BLOB → expand \n when needed → persist to $GITHUB_ENV
      - name: Load secrets into runner-wide env
        run: |
          echo "$SECRETS_BLOB" | base64 --decode |
          while IFS= read -r line; do
            var="${line%%=*}"
            val="${line#*=}"

            # expand back-slash escapes (\n, \t …)
            expanded=$(printf '%b' "$val")

            if [[ "$expanded" == *$'\n'* ]]; then
              # multiline value → heredoc
              {
                printf '%s<<EOF\n' "$var"
                printf '%s\n' "$expanded"
                echo EOF
              } >> "$GITHUB_ENV"
            else
              # single-line value → plain assignment
              printf '%s=%s\n' "$var" "$expanded" >> "$GITHUB_ENV"
            fi
          done

      # optional dump of every env key (values auto-masked by GitHub)
      - name: Dump **every** env variable
        run: |
          echo "🟢 Full environment visible to Node:"
          node -e 'for (const [k,v] of Object.entries(process.env).sort()) console.log(`${k}=${v}`)'

      - uses: cypress-io/github-action@v6
        id: cypress
        with:
          build: bun run build:no-tests
          start: bun run start
          wait-on: http://localhost:3000
          wait-on-timeout: 60
          headed: true
          browser: chrome
          record: false         # toggle when you want Dashboard recordings
          config: |
            video=true
            screenshotOnRunFailure=true
            retries=1

      # upload screenshots/videos if any spec fails
      - name: Upload Cypress videos & screenshots
        if: failure() || steps.cypress.outcome != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: cypress-debug
          path: |
            cypress/videos
            cypress/screenshots

  # ──────────────────────────────────────────────────────────
  # 2  DEPLOY – runs on every branch once tests are green
  # ──────────────────────────────────────────────────────────
  deploy:
    needs: test
    if: needs.test.result == 'success'     # gate on green tests
    runs-on: ubuntu-latest
    env:
      SECRETS_BLOB: ${{ secrets.SECRETS_BLOB }}

    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: "1.2.16"
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps (retry, low concurrency)
        run: |
          for try in 1 2 3; do
            bun install --network-concurrency=12 --no-progress && break
            [ "$try" -lt 3 ] && { echo "⚠️  retrying in 15 s…"; sleep 15; }
          done

      # same robust secret-loading logic
      - name: Load secrets into runner-wide env
        run: |
          echo "$SECRETS_BLOB" | base64 --decode |
          while IFS= read -r line; do
            var="${line%%=*}"
            val="${line#*=}"
            expanded=$(printf '%b' "$val")

            if [[ "$expanded" == *$'\n'* ]]; then
              {
                printf '%s<<EOF\n' "$var"
                printf '%s\n' "$expanded"
                echo EOF
              } >> "$GITHUB_ENV"
            else
              printf '%s=%s\n' "$var" "$expanded" >> "$GITHUB_ENV"
            fi
          done

      - name: Dump **every** env variable (deploy job)
        run: |
          echo "🟢 Full environment visible to Node (deploy job):"
          node -e 'for (const [k,v] of Object.entries(process.env).sort()) console.log(`${k}=${v}`)'

      - name: Deploy with Vercel
        run: |
          npm install -g vercel
          vercel --prod --confirm
